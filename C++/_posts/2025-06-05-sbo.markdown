---
layout: post
title: Small Buffer Optimization
---
**Small Buffer Optimization** (SBO) is a technique used in C++ standard library containers—most notably in `std::string` and `std::function`—to store small data directly **within the object’s memory footprint**, avoiding heap allocation.

Think of it as an invisible optimization layer. When you create a small string like `"Hi"` using `std::string`, there’s a good chance no heap memory is allocated. Instead, the string is stored inside a buffer that is part of the string object itself.

For larger data, the behavior reverts to traditional heap allocation. `std::string` objects, for instance, typically reserve some internal space—often 15 or 23 bytes—depending on the implementation. If your data fits within that space, it’s stored directly inside the object.

When the data is too large, the object instead uses a pointer to a dynamically allocated buffer, just as you’d expect.

Below is a snippet from the `libstdc++` implementation of `std::basic_string`, showing how small strings are stored using an internal union. The `union` holds either the local buffer (for small strings) or capacity info (for heap-allocated strings). Several helper methods provide access to the local and dynamic data areas:

```cpp
      _Alloc_hider    _M_dataplus;
      size_type        _M_string_length;

      enum { _S_local_capacity = 15 / sizeof(_CharT) };

      union
      {
    _CharT           _M_local_buf[_S_local_capacity + 1]; // The local buffer used to store small strings
    size_type        _M_allocated_capacity;
      };

      _GLIBCXX20_CONSTEXPR
      void
      _M_data(pointer __p)
      { _M_dataplus._M_p = __p; }

      _GLIBCXX20_CONSTEXPR
      void
      _M_length(size_type __length)
      { _M_string_length = __length; }

      _GLIBCXX20_CONSTEXPR
      pointer
      _M_data() const
      { return _M_dataplus._M_p; }

      _GLIBCXX20_CONSTEXPR
      pointer
      _M_local_data()
      {
#if __cplusplus >= 201103L
    return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
#else
    return pointer(_M_local_buf);
#endif
      }

      _GLIBCXX20_CONSTEXPR
      const_pointer
      _M_local_data() const
      {
#if __cplusplus >= 201103L
    return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
#else
    return const_pointer(_M_local_buf);
#endif
      }

      _GLIBCXX20_CONSTEXPR
      void
      _M_capacity(size_type __capacity)
      { _M_allocated_capacity = __capacity; }

      _GLIBCXX20_CONSTEXPR
      void
      _M_set_length(size_type __n)
      {
    _M_length(__n);
    traits_type::assign(_M_data()[__n], _CharT());
      }

      _GLIBCXX20_CONSTEXPR
      bool
      _M_is_local() const
      {
    if (_M_data() == _M_local_data())
      {
        if (_M_string_length > _S_local_capacity)
          __builtin_unreachable();
        return true;
      }
    return false;
      }
```

This second snippet shows how the `assign` method in `std::basic_string` handles small and large strings differently during copy assignment. If the source string is small enough to fit in the local buffer, it avoids dynamic allocation entirely:

```cpp
      /**
       *  @brief  Set value to contents of another string.
       *  @param  __str  Source string to use.
       *  @return  Reference to this string.
       */
      _GLIBCXX20_CONSTEXPR
      basic_string&
      assign(const basic_string& __str)
      {
#if __cplusplus >= 201103L
    if (_Alloc_traits::_S_propagate_on_copy_assign())
      {
        if (!_Alloc_traits::_S_always_equal() && !_M_is_local()
        && _M_get_allocator() != __str._M_get_allocator())
          {
        // Propagating allocator cannot free existing storage so must
        // deallocate it before replacing current allocator.
        if (__str.size() <= _S_local_capacity)
          {
            _M_destroy(_M_allocated_capacity);
            _M_data(_M_use_local_data());
            _M_set_length(0);
          }
        else
          {
            const auto __len = __str.size();
            auto __alloc = __str._M_get_allocator();
            // If this allocation throws there are no effects:
            auto __ptr = _S_allocate(__alloc, __len + 1);
            _M_destroy(_M_allocated_capacity);
            _M_data(__ptr);
            _M_capacity(__len);
            _M_set_length(__len);
          }
          }
        std::__alloc_on_copy(_M_get_allocator(), __str._M_get_allocator());
      }
#endif
    this->_M_assign(__str);
    return *this;
      }
```

You can verify whether a string is using SBO with a simple trick—compare the address of the object to the address of its internal buffer:

```cpp
#include <iostream>
#include <string>

int main() {
  const std::string short_str = "short string";

  std::cout << "Address of `short_str` object: " << &short_str << std::endl;
  std::cout << "Address of `short_str` internal buffer: "
            << static_cast<const void *>(short_str.data()) << std::endl;

  const std::string long_str = "long stringggggggg";

  std::cout << "Address of `long_str` object: " << &long_str << std::endl;
  std::cout << "Address of `long_str` internal buffer: "
            << static_cast<const void *>(long_str.data()) << std::endl;
}
```

The output is:

```text
Address of `short_str` object: 0x7ffd8d4b6410
Address of `short_str` internal buffer: 0x7ffd8d4b6420
Address of `long_str` object: 0x7ffd8d4b6430
Address of `long_str` internal buffer: 0x56b2b41a26c0
```

The internal buffer is located close to (or inside) the object—demonstrating SBO in action.

Since SBO avoids heap allocation, it offers two major benefits:

1. **Performance:** No need to allocate or deallocate memory for small objects.
2. **Cache locality:** The data resides directly within the object, making access faster due to improved memory locality.

Used appropriately, SBO can eliminate unnecessary overhead in tight loops or memory-constrained environments. It’s especially useful when dealing with large numbers of small temporary strings or callable objects (like `std::function`).

Keep in mind, however, that SBO is **not guaranteed**. It’s an implementation detail and may vary between compilers and standard libraries. For example, GCC’s `libstdc++` and Clang’s `libc++` may use different thresholds for when SBO is applied.

Also note that the extra space reserved for SBO is always present—even for large data—so there's a tradeoff: you avoid small allocations at the cost of slightly increased object size.

Besides `std::string`, SBO is also used in:

* `std::function`: Stores callable objects inline if they’re small enough.
* `std::any` and `std::variant`: Many implementations apply SBO-like optimizations to avoid dynamic allocation for small values.
* Some custom containers and object pools also employ SBO patterns.

If you’re writing a custom class that often stores small objects, you can even implement SBO yourself using a `union` and placement `new`—but that’s a topic for another post.
